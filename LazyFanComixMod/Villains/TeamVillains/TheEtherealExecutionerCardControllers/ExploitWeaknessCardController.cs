using Handelabra.Sentinels.Engine.Controller;
using Handelabra.Sentinels.Engine.Model;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace LazyFanComix.TheEtherealExecutionerTeam
{
    public class ExploitWeaknessCardController : TheEtherealExecutionerSharedCardController
    {
        public ExploitWeaknessCardController(Card card, TurnTakerController turnTakerController)
            : base(card, turnTakerController)
        {
        }

        public override IEnumerator Play()
        {
            IEnumerator coroutine;
            List<DealDamageAction> ddaResults = new List<DealDamageAction>();

            // Trigger to increase damage dealt by 1 per card.
            ITrigger tempIncrease = this.AddIncreaseDamageTrigger((DealDamageAction dda) => dda.CardSource.CardController == this, (DealDamageAction dda) => this.CountObservationCards());

            coroutine = this.DealDamageToHighestHP(this.CharacterCard, 1, (Card c) => c.IsHeroCharacterCard, (Card c) => 3, DamageType.Projectile, storedResults: ddaResults);
            if (this.UseUnityCoroutines) { yield return this.GameController.StartCoroutine(coroutine); } else { this.GameController.ExhaustCoroutine(coroutine); }

            this.RemoveTrigger(tempIncrease);

            HeroTurnTaker targetPlayer = ddaResults?.FirstOrDefault()?.Target?.Owner?.ToHero();
            if (targetPlayer != null)
            {
                coroutine = this.GameController.SelectAndDestroyCards(this.DecisionMaker, new LinqCardCriteria((Card c) => c.Owner == targetPlayer && (this.IsOngoing(c) || this.IsEquipment(c, false)), "hero ongoing or equipment"), 1, cardSource: this.GetCardSource());
                if (this.UseUnityCoroutines) { yield return this.GameController.StartCoroutine(coroutine); } else { this.GameController.ExhaustCoroutine(coroutine); }
            }
        }
    }
}